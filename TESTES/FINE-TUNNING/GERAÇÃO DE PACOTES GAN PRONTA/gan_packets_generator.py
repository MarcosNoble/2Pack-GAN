import numpy as np
import os
import tensorflow as tf
from keras.models import load_model
import sys

# Adicione o caminho do diretório Gan ao sys.path
current_directory = os.path.dirname(os.path.abspath(__file__))
parent_directory = os.path.dirname(current_directory)
gan_directory = os.path.join(parent_directory, 'GAN')
sys.path.append(gan_directory)

from gan_ip import wasserstein_loss

current_dir = os.path.dirname(os.path.abspath(__file__))

generator_path = os.path.join(gan_directory, 'models_ft_dns/generator_model15.keras')

def generate_packets_by_gan(num_images, generated_bytes_dir):
    """Generate packets using a GAN
    
    Args:
        num_images (integer): Number of images to generate
    """
    if not os.path.exists(generated_bytes_dir):
        os.makedirs(generated_bytes_dir)

    # Carregar o modelo gerador
    generator = load_model(generator_path, custom_objects={'wasserstein_loss': wasserstein_loss})

    # Gerar ruído aleatório para entrada do gerador
    noise = np.random.normal(0, 1, (num_images, 1024))  # Substitua input_dim pelo tamanho adequado do ruído

    # Gerar imagens usando o gerador
    generated_images = generator.predict(noise)

    generated_packets = {"generated_packets": []}

    # Salvar as imagens geradas em um arquivo npz, transformando elas para um intervalo entre 0 e 255
    for image in generated_images:
        image = (image + 1) * 127.5
        image = image.astype(np.uint8)
    
        generated_packets["generated_packets"].append(image)
    
    np.savez(os.path.join(generated_bytes_dir, 'generated_packets'), **generated_packets)
    
    print("Packets generated by GAN!")
    
    return