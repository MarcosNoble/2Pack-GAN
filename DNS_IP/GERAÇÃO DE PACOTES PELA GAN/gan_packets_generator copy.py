import numpy as np
import os
import tensorflow as tf
from keras.models import load_model
import sys

current_directory = os.path.dirname(os.path.abspath(__file__))
parent_directory = os.path.dirname(current_directory)
gan_directory = os.path.join(parent_directory, 'GAN')
sys.path.append(gan_directory)

# from gan import wasserstein_loss

current_dir = os.path.dirname(os.path.abspath(__file__))
generator_pre_trained_dir = os.path.join(gan_directory, 'models')

parent_dir = os.path.dirname(current_dir)
grandpa_dir = os.path.dirname(parent_dir)
FINE_TUNING_dir = os.path.join(grandpa_dir, 'FINE-TUNING')
NOVO_FINE_TUNING_dir = os.path.join(FINE_TUNING_dir, 'NOVO FINE-TUNING')
ft_models_dir = os.path.join(NOVO_FINE_TUNING_dir, 'models')

def generate_packet_by_gan(generator_option, number_of_packets):
    '''Generate packets using GAN
    
    Returns:
        packet: Generated packet
    '''    
    if generator_option == '1':
        generator_path = os.path.join(generator_pre_trained_dir, 'generator_model50.keras')
    elif generator_option == '2':
        generator_path = os.path.join(ft_models_dir, 'generator_model34.keras')
    else:
        print("Invalid option!")
        return
    from gan import wasserstein_loss
  
    generator = load_model(generator_path, custom_objects={'wasserstein_loss': wasserstein_loss})

    noise = np.random.normal(0.0, 1.0, (number_of_packets, 1024))

    generated_images = generator.predict(noise)

    for i in range(number_of_packets):
        generated_images[i] = (generated_images[i] + 1) * 127.5
        generated_images[i] = generated_images[i].astype(np.uint8)
                    
    print("Packets generated by GAN!")
    
    return generated_images